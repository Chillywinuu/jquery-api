<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div class="entry">
   <h2><span>返回值:jQuery</span>keypress(handler(eventObject))<br></h2>
   <div class="desc">
      <p>Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>keypress(handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.4.3 新增</span>keypress(<em class="optional">[eventData]</em>, handler(eventObject))
               								
            </h4>
            <div class="arguement"><strong>eventData</strong>
               								(Object)
               								 可选参数，将要传递给事件处理函数的数据映射。
            </div>
            <div class="arguement"><strong>handler(eventObject)</strong>
               								(Function)
               								每当事件触发时执行的函数。
            </div>
         </li>
         <li>
            <h4><span>1.0 新增</span>keypress()
               								
            </h4>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>This method is a shortcut for <code>.bind('keypress', handler)</code> in the first variation, and <code>.trigger('keypress')</code> in the second.
         </p>
         
         <p>The <code>keypress</code> event is sent to an element when the browser registers keyboard input. This is similar to the <code>keydown</code> event, except in the case of key repeats. If the user presses and holds a key, a <code>keydown </code>event is triggered once, but separate <code>keypress</code> events are triggered for each inserted character. In addition, modifier keys (such as Shift) cause <code>keydown</code> events but not <code>keypress</code> events.
         </p>
         
         <p>A <code>keypress</code> event handler can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements
            can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.
         </p>
         
         <p>For example, consider the HTML:</p>
         <pre>&lt;form&gt;
	&lt;fieldset&gt;
  	&lt;input id="target" type="text" value="Hello there" /&gt;
	&lt;/fieldset&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre>
         <p>The event handler can be bound to the input field:</p>
         <pre>$('#target').keypress(function() {
  alert('Handler for .keypress() called.');
});</pre>
         <p>Now when the insertion point is inside the field and a key is pressed, the alert is displayed:</p>
         
         <p>
            <span class="output">Handler for .keypress() called.</span>
            
         </p>
         
         <p>The message repeats if the key is held down. We can trigger the event manually when another element is clicked:</p>
         <pre>$('#other').click(function() {
  $('#target').keypress();
});</pre>
         <p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.
         </p>
         
         <p>If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach
            this behavior to the <code>document</code> object. Because of event bubbling, all key presses will make their way up the DOM to the <code>document</code> object unless explicitly stopped.
         </p>
         
         <p>To determine which character was entered, we can examine the event object that is passed to the handler function. While browsers
            use differing attributes to store this information, jQuery normalizes the <code>.which</code> attribute so we can reliably use it to retrieve the character code.
         </p>
         
         <p>Note that <code>keydown</code> and <code>keyup</code> provide a code indicating which key is pressed, while <code>keypress</code> indicates which character was entered. For example, a lowercase "a" will be reported as 65 by <code>keydown</code> and <code>keyup</code>, but as 97 by <code>keypress</code>. An uppercase "A" is reported as 65 by all events. Because of this distinction, when catching special keystrokes such as
            arrow keys, <code>.keydown()</code> or <code>.keyup()</code> is a better choice.
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>Show the event object for the keypress handler when a key is pressed in the input.</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
fieldset { margin-bottom: 1em; }
input { display: block; margin-bottom: .25em; }
#print-output {
  width: 100%;
}
.print-output-line {
  white-space: pre;
  padding: 5px;
  font-family: monaco, monospace;
  font-size: .7em;
}

&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;form&gt;
  &lt;fieldset&gt;
    &lt;label for="target"&gt;Type Something:&lt;/label&gt;
    &lt;input id="target" type="text" /&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;button id="other"&gt;
  Trigger the handler
&lt;/button&gt;
&lt;script type="text/javascript" src="/scripts/events.js"&gt;&lt;/script&gt;

&lt;script&gt;


var xTriggered = 0;
$('#target').keypress(function(event) {
  if (event.keyCode == '13') {
     event.preventDefault();
   }
   xTriggered++;
   var msg = 'Handler for .keypress() called ' + xTriggered + ' time(s).';
  $.print(msg, 'html');
  $.print(event);
});

$('#other').click(function() {
  $('#target').keypress();
});

&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h5>演示:</h5><iframe src="blank.html" width="658" height="460"></iframe></div>
</div>