<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<div class="entry">
   <h2><span>返回值:String</span>css(propertyName)<br></h2>
   <div class="desc">
      <p>Get the value of a style property for the first element in the set of matched elements.</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>css(propertyName)
               								
            </h4>
            <div class="arguement"><strong>propertyName</strong>
               								(String)
               								A CSS property.
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>The <code>.css()</code> method is a convenient way to get a style property from the first matched element, especially in light of the different ways
            browsers access most of those properties (the <code>getComputedStyle()</code> method in standards-based browsers versus the <code>currentStyle</code> and <code>runtimeStyle</code> properties in Internet Explorer) and the different terms browsers use for certain properties. For example, Internet Explorer's
            DOM implementation refers to the <code>float</code> property as <code>styleFloat</code>, while W3C standards-compliant browsers refer to it as <code>cssFloat</code>. The <code>.css()</code> method accounts for such differences, producing the same result no matter which term we use. For example, an element that
            is floated left will return the string <code>left</code> for each of the following three lines:
         </p>
         
         <ol>
            	              
            <li>
               <code>$('div.left').css('float');</code>
               
            </li>
            	              
            <li>
               <code>$('div.left').css('cssFloat');</code>
               
            </li>
            	              
            <li>
               <code>$('div.left').css('styleFloat');</code>
               
            </li>
            
         </ol>
         
         <p>Also, jQuery can equally interpret the CSS and DOM formatting of multiple-word properties. For example, jQuery understands
            and returns the correct value for both <code>.css('background-color')</code> and <code>.css('backgroundColor')</code>.
         </p>
         
         <p>Shorthand CSS properties (e.g. margin, background, border) are not supported. For example, if you want to retrieve the rendered
            margin, use: <code>$(elem).css('marginTop')</code> and <code>$(elem).css('marginRight')</code>, and so on.
         </p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>To access the background color of a clicked div.</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
div { width:60px; height:60px; margin:5px; float:left; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


&lt;span id="result"&gt;&amp;nbsp;&lt;/span&gt;
&lt;div style="background-color:blue;"&gt;&lt;/div&gt;
&lt;div style="background-color:rgb(15,99,30);"&gt;&lt;/div&gt;

&lt;div style="background-color:#123456;"&gt;&lt;/div&gt;
&lt;div style="background-color:#f11;"&gt;&lt;/div&gt;

&lt;script&gt;


$("div").click(function () {
  var color = $(this).css("background-color");
  $("#result").html("That div is &lt;span style='color:" +
                     color + ";'&gt;" + color + "&lt;/span&gt;.");
});



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h5>演示:</h5><iframe src="blank.html" width="658" height="125"></iframe></div>
</div>
<div class="entry">
   <h2><span>返回值:jQuery</span>css(propertyName, value)<br></h2>
   <div class="desc">
      <p>Set one or more CSS properties for the  set of matched elements.</p>
      <ul class="signatures">
         <li>
            <h4><span>1.0 新增</span>css(propertyName, value)
               								
            </h4>
            <div class="arguement"><strong>propertyName</strong>
               								(String)
               								A CSS property name.
            </div>
            <div class="arguement"><strong>value</strong>
               								(String, Number)
               								A value to set for the property.
            </div>
         </li>
         <li>
            <h4><span>1.4 新增</span>css(propertyName, function(index, value))
               								
            </h4>
            <div class="arguement"><strong>propertyName</strong>
               								(String)
               								A CSS property name.
            </div>
            <div class="arguement"><strong>function(index, value)</strong>
               								(Function)
               								A function returning the value to set. Receives the index position of the element in the set and the old value as arguments.
            </div>
         </li>
         <li>
            <h4><span>1.0 新增</span>css(map)
               								
            </h4>
            <div class="arguement"><strong>map</strong>
               								(Map)
               								A map of property-value pairs to set.
            </div>
         </li>
      </ul>
      <div class="longdesc">
         
         <p>As with the <code>.attr()</code> method, the <code>.css()</code> method makes setting properties of elements quick and easy. This method can take either a property name and value as separate
            parameters, or a single map of key-value pairs (JavaScript object notation).
         </p>
         
         <p>Also, jQuery can equally interpret the CSS and DOM formatting of multiple-word properties. For example, jQuery understands
            and returns the correct value for both <code>.css({'background-color': '#ffe', 'border-left': '5px solid #ccc'})</code> and <code>.css({backgroundColor: '#ffe', borderLeft: '5px solid #ccc'})</code>. Notice that with the DOM notation, quotation marks around the property names are optional, but with CSS notation they're
            required due to the hyphen in the name.
         </p>
         
         <p>As with <code><a href="attr.htm">.attr()</a></code>, <code>.css()</code> allows us to pass a function as the property value:
         </p>
         <pre>$('div.example').css('width', function(index) {
  return index * 50;
});</pre>
         <p>This example sets the widths of the matched elements to incrementally larger values.</p>
         
      </div>
   </div>
   <div class="example">
      <h3>示例:</h3>
      <p>To change the color of any paragraph to red on mouseover event.</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p { color:blue; width:200px; font-size:14px; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


  &lt;p&gt;Just roll the mouse over me.&lt;/p&gt;

  &lt;p&gt;Or me to see a color change.&lt;/p&gt;
  

&lt;script&gt;


  $("p").mouseover(function () {
    $(this).css("color","red");
  });


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h5>演示:</h5><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>To highlight a clicked word in the paragraph.</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p { color:blue; font-weight:bold; cursor:pointer; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


&lt;p&gt;
  Once upon a time there was a man
  who lived in a pizza parlor. This
  man just loved pizza and ate it all 
  the time.  He went on to be the
  happiest man in the world.  The end.
&lt;/p&gt;

&lt;script&gt;


  var words = $("p:first").text().split(" ");
  var text = words.join("&lt;/span&gt; &lt;span&gt;");
  $("p:first").html("&lt;span&gt;" + text + "&lt;/span&gt;");
  $("span").click(function () {
    $(this).css("background-color","yellow");
  });



&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h5>演示:</h5><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>To set the color of all paragraphs to red and background to blue:</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  p { color:green; }
&lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


  &lt;p&gt;Move the mouse over a paragraph.&lt;/p&gt;
  &lt;p&gt;Like this one or the one above.&lt;/p&gt;


&lt;script&gt;


  $("p").hover(function () {
    $(this).css({'background-color' : 'yellow', 'font-weight' : 'bolder'});
  }, function () {
    var cssObj = {
      'background-color' : '#ddd',
      'font-weight' : '',
      'color' : 'rgb(0,40,244)'
    }
    $(this).css(cssObj);
  });


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h5>演示:</h5><iframe src="blank.html" width="658" height="125"></iframe><h3>示例:</h3>
      <p>Increase the size of a div when you click it:</p><pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
  div { width: 20px; height: 15px; background-color: #f33; }
  &lt;/style&gt;
&lt;script src="jquery.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;


  &lt;div&gt;click&lt;/div&gt;
  &lt;div&gt;click&lt;/div&gt;


&lt;script&gt;


  $("div").click(function() {
    $(this).css({
      width: function(index, value) {
        return parseFloat(value) * 1.2;
      }, 
      height: function(index, value) {
        return parseFloat(value) * 1.2;
      }

    });
  });


&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre><h5>演示:</h5><iframe src="blank.html" width="658" height="125"></iframe></div>
</div>